# Use this version when there are parameters for 
#   both Table and Field for Sampling Occasion

import arcpy
import os
class ToolValidator(object):
  """Class for validating a tool's parameter values and controlling
  the behavior of the tool's dialog."""

  def __init__(self):
    """Setup arcpy and the list of tool parameters."""
    self.params = arcpy.GetParameterInfo()
    self.sampoccerr = False

  def initializeParameters(self):
    """Refine the properties of a tool's parameters.  This method is
    called when the tool is opened."""
    self.params[8].enabled = False
    return

  def updateParameters(self):
    """Modify the values and properties of parameters before internal
    validation is performed.  This method is called whenever a parameter
    has been changed."""
    #
    # Get Sampling Occasion Table and Field and
    #   create Filter list for Sampling Occasion parameter
    #
    if self.params[6].value and self.params[7].value:
      sampocc_tbl = str(self.params[6].value)
      desctbl = arcpy.Describe(self.params[6].value)
      fieldnames = [f.name for f in desctbl.fields]
      sampocc_fld = str(self.params[7].value)
      #
      # Sampling Occasion Table and Sampling Occasion Field can
      # get out of synch if user changes table.  So, have
      # to check here. (otherwise, get run-time error)
      # If they don't match, Internal validation will raise error,
      # but this doesn't happen until after updateParameters is run
      #
      if sampocc_fld in fieldnames:
        values = set()
        rows = arcpy.SearchCursor(sampocc_tbl)
        for row in rows:
          # Need this check to avoid null data values in list
          if row.getValue(sampocc_fld):
            values.add(row.getValue(sampocc_fld))
        if values:
          sort = sorted(values)
          sort.reverse() # so recent years show at top of list
          self.params[8].filter.list = sort
          self.params[8].enabled = True
        else:
          self.params[8].value = "[SVMP ERROR]: Field %s has no entries. Choose a different field.]" % (sampocc_fld)
          self.params[8].enabled = False
    return

  def updateMessages(self):
    """Modify the messages created by internal validation for each tool
    parameter.  This method is called after internal validation."""
    if self.params[8].value and self.params[8].value.startswith("[SVMP ERROR]"):
      self.params[8].setErrorMessage("[SVMP ERROR]: Sampling Occasion field has no entries.  Choose a different field")
    return
